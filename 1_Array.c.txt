#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Structure for binary tree node
struct TreeNode {
    int data;
};

// Array to store binary tree nodes
struct TreeNode* tree[MAX_SIZE];

// Function to create a new node
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    return newNode;
}

// Function to insert a node into the binary tree
void insert(int index, int data) {
    if (tree[index] == NULL) {
        tree[index] = createNode(data);
    } else {
        printf("Node already exists at index %d\n", index);
    }
}

// Function to traverse and print the binary tree using inorder traversal
void inorderTraversal(int index) {
    if (tree[index] != NULL) {
        inorderTraversal(2 * index + 1);
        printf("%d ", tree[index]->data);
        inorderTraversal(2 * index + 2);
    }
}

int main() {
    // Initialize tree nodes to NULL
    for (int i = 0; i < MAX_SIZE; i++) {
        tree[i] = NULL;
    }

    // Inserting nodes into the binary tree
    insert(0, 10);   // Root node
    insert(1, 20);   // Left child of the root
    insert(2, 30);   // Right child of the root
    insert(3, 40);   // Left child of the node at index 1
    insert(4, 50);   // Right child of the node at index 1

    // Printing the binary tree using inorder traversal
    printf("Binary Tree (Inorder Traversal): ");
    inorderTraversal(0);
    printf("\n");

    return 0;
}
